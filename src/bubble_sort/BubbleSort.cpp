#include <iostream>
#include "BubbleSort.h"
using namespace std;

//起泡排序:
//最好O(n),最坏O(n^2)
//具有稳定性

//起泡排序(版本0):
//蛮力算法
//时间复杂度:O(n^2)
void bubbleSort_0(int A[], int n) { //0 <= n
    while (n--) { //在尚未确认已全局排序之前,逐趟进行扫描交换
        for ( int i = 0; i < n; i ++) { //自左向右逐对检查当前范围A[0, n)内的各相邻元素
            if ( A[i] > A[i+1] ) { //一旦A[i]与A[i+1]逆序,则
                swap (A[i], A[i+1]); //交换之
            }
        }
    }
}

//起泡排序(版本1A):
//借助布尔型标志位sorted,若中途发现已经排好,则提前结束,可及时提前退出,而不致总是蛮力地做n-1趟扫描交换
//对尾部有序(或接近有序)的输入,算法依然亦步亦趋地收敛,导致元素比较次数过多
//时间复杂度:乱序限于[0,n^(1/2))时,仍需O(n^(3/2))的时间--按理,O(n)应已足矣
void bubbleSort_1A (int A[], int n){ //0 <= n
    bool sorted = false;
    while(!sorted){
        sorted = true;
        for ( int i = 1; i < n; i++ ) { //自左向右逐对检查当前范围A[0, n)内的各相邻元素
            if ( A[i - 1] > A[i] ) { //一旦A[i - 1]与A[i]逆序,则
                swap ( A[i - 1], A[i] ); //交换之，并
                sorted = false; //因整体排序不能保证,需要清除排序标志
            }
        }
        n--; //至此末元素必然就位,故可以缩短待排序序列的有效长度(放在for循环i<n--也可以)
    }
}

//起泡排序(版本1B,与版本1A完全等价):
//借助布尔型标志位sorted,若中途发现已经排好,则提前结束,可及时提前退出,而不致蛮力地做n-1趟扫描交换
//对尾部有序(或接近有序)的输入,算法依然亦步亦趋地收敛,导致元素比较次数过多
//时间复杂度:乱序限于[0,n^(1/2))时,仍需O(n^(3/2))的时间--按理,O(n)应已足矣
void bubbleSort_1B ( int A[], int n ) { //0 <= n
    for ( bool sorted = false; sorted = !sorted; n-- ) { //在尚未确认已全局排序之前,逐趟进行扫描交换
        for ( int i = 1; i < n; i++ ) { //自左向右逐对检查当前范围A[0, n)内的各相邻元素
            if ( A[i-1] > A[i] ) { //一旦A[i-1]与A[i]逆序,则
                swap ( A[i-1], A[i] ); //交换之,并
                sorted = false; //因整体排序不能保证,需要清除排序标志
            }
        }
    }
}

//起泡排序(版本2):
//借助整数m尽快地收缩待排序区间：既可提前退出,更可减少每趟(及所有)扫描交换中元素比较操作
//对尾部有序(或接近有序)的输入,算法收敛的速度大大提高
//元素交换的次数仅取决于输入序列,与版本0和版本1相同
//时间复杂度:比版本0和1会有所改进
void bubbleSort_2 ( int A[], int n ) { //0 <= n
    for ( int m; 1 < n; n = m ) { //在尚未确认已全局排序之前,逐趟进行扫描交换
        for ( int i = m = 1; i < n; i++ ) { //自左向右逐对检查当前范围A[0, m)内的各相邻元素
            if ( A[i-1] > A[i] ) { //一旦A[i-1]与A[i]逆序,则
                swap ( A[i-1], A[i] ); //交换之,并
                m = i; //更新待排序区间的长度
            }
        }
    }
}